!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var n=function(){function t(t,e){this.x=t,this.y=e,this.magnitude=Math.sqrt(t^2+e^2)}return t.prototype.set=function(t,e){this.x=t,this.y=e,this.magnitude=Math.sqrt(t^2+e^2)},t.prototype.setMag=function(t){var e=Math.atan2(this.y,this.x);this.x=Math.cos(e)*t,this.y=Math.sin(e)*t,this.magnitude=t},t.prototype.heading=function(){return Math.atan2(this.y,this.x)},t.prototype.mult=function(t){this.x=this.x*t,this.y=this.y*t},t.add=function(e,i){return new t(e.x+i.x,e.y+i.y)},t.sub=function(e,i){return new t(e.x-i.x,e.y-i.y)},t}(),s=function(){function t(t,e,i,s,h){this.a=new n(t,e),this.len=i,this.angle=s;var a=this.len*Math.cos(this.angle),o=this.len*Math.sin(this.angle);this.b=new n(this.a.x+a,this.a.y+o),void 0!==h?(this.parent=h,this.a=new n(this.parent.b.x,this.parent.b.y)):this.parent=null,this.calculateB()}return t.prototype.follow=function(t,e,i){var s=new n(t,e),h=n.sub(s,this.a);this.angle=h.heading(),null!==this.parent?(h.setMag(this.len),h.mult(-1),this.a=n.add(s,h)):void 0!==i&&(i.a.x=this.b.x,i.a.y=this.b.y)},t.prototype.calculateB=function(){var t=this.len*Math.cos(this.angle),e=this.len*Math.sin(this.angle);this.b.set(this.a.x+t,this.a.y+e)},t.prototype.update=function(){this.calculateB()},t.prototype.draw=function(t){t.beginPath(),t.moveTo(this.a.x,this.a.y),t.lineTo(this.b.x,this.b.y),t.stroke()},t}(),h=function(){function t(t,e,i,n){this.len=i.len+n.len,this.reachCount=25,this.targetX=t,this.targetY=e,this.seg1=i,this.seg2=n}return t.prototype.reach=function(){this.reachCount>0&&(this.reachCount--,this.targetX+=2)},t.prototype.update=function(){this.seg1.a.x++,this.seg2.follow(this.targetX,this.targetY),this.seg2.update(),this.seg1.follow(this.seg2.a.x,this.seg2.a.y,this.seg2),this.seg1.update(),function(t,e){var i=e.b.x-t.a.x,n=e.b.y-t.a.y;return Math.sqrt(i*i+n*n)}(this.seg1,this.seg2)>this.len&&this.targetX<this.seg2.a.x&&(this.reachCount=40),this.reach()},t.prototype.draw=function(t){this.seg1.draw(t),this.seg2.draw(t)},t}(),a=function(){function t(t,e,i,n){this.ticks=1,this.x=t,this.y=e,this.h=i,this.w=n,this.legs=[];var a=new s(this.x+this.w,this.y,10,225*Math.PI/180),o=new s(0,0,10,0,a),r=new s(this.x+this.w,this.y+this.h,10,90*Math.PI/180),u=new s(0,0,10,0,r),l=new s(this.x,this.y+this.h,10,90*Math.PI/180),c=new s(0,0,10,0,r),f=new s(this.x,this.y,10,225*Math.PI/180),p=new s(0,0,10,0,a);this.legs.push(new h(t+this.w+10,e-5,a,o)),this.legs.push(new h(t-this.w-10,e+this.h+5,r,u)),this.legs.push(new h(t-this.w-10,e+this.h+5,l,c)),this.legs.push(new h(t-this.w+10,e-5,f,p))}return t.prototype.update=function(){this.ticks++,this.x++,this.legs.forEach(function(t){t.update()})},t.prototype.draw=function(t){t.fillStyle="grey",t.fillRect(this.x,this.y,this.w,this.h),this.legs.forEach(function(e){e.draw(t)})},t}();var o=document.getElementById("gameScreen"),r=o.getContext("2d"),u=o.getBoundingClientRect(),l=0,c=0,f=new s(300,200,100,0),p=new s(0,0,100,0,f),g=new a(0,250,25,25);setInterval(function(){g.update(),p.follow(c,l),p.update(),f.follow(p.a.x,p.a.y,p),f.update(),r.clearRect(0,0,o.width,o.height),g.draw(r),f.draw(r),p.draw(r)},12),o.addEventListener("mousemove",function(t){c=(t.clientX-u.left)/(u.right-u.left)*o.width,l=(t.clientY-u.top)/(u.bottom-u.top)*o.height},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,